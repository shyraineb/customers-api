<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="getCustomers-db-test" doc:id="45376fcb-5f10-4cb5-848e-065569e42506" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="83c33ec9-c5f8-466e-b5de-ea5b67d6aef6" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="304d13e2-cdbb-4f53-afa9-79b31dfdba31" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getCustomersdbtest1/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getCustomersdbtest1/mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="cf897245-069b-4bcc-a4c4-9fbd154addc3" >
				<munit:payload value="#[readUrl('classpath://getCustomersdbtest1/set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getCustomersdbtest1/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getCustomersdbtest1/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getCustomers-db" doc:id="039760dc-7675-4558-90f6-8e57f25dc2b5" name="getCustomers-db"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7f840c94-42f7-472b-ae18-c343471b310a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getCustomersdbtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="postCustomer-db-test" doc:id="e08b9704-58dd-4517-9493-9b2bd28b8351" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Stored procedure" doc:id="9c8abed4-5a4e-43cc-ba13-b23347031896" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e5e90c23-db21-474a-9141-2bd6d42e5f47" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postCustomerdbtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCustomerdbtest/mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="09c19ffe-aa5a-43c5-94f6-55a075775b28" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCustomerdbtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCustomerdbtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCustomerdbtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCustomer-db" doc:id="9c6ee8e4-6684-41c3-9f6f-bae1cd05d54c" name="postCustomer-db"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c1b3686c-cd9c-4164-8c42-208c4b33610c" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCustomerdbtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateCustomer-db-test" doc:id="e58ed2c3-2ed4-41f9-b738-1fe512954923" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Stored procedure" doc:id="f44897c3-2762-4488-808e-431bce8f21a4" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="de3da195-56b9-41b3-84ec-22e057de5be1" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://updateCustomerdbtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://updateCustomerdbtest/mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a98e52c5-7928-40c4-895e-a53a0c112c0e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://updateCustomerdbtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://updateCustomerdbtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://updateCustomerdbtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to updateCustomer-db" doc:id="a872adfb-9272-4213-9912-1c1ac3702091" name="updateCustomer-db"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f6075221-ec49-4e5c-bcfe-d60837cdb0d6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import updateCustomerdbtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="deleteCustomer-db-test" doc:id="237dc989-5543-4f43-b47c-b88e2a7a0461" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Stored procedure" doc:id="26919dbe-edf5-459a-be8e-80e95e0e1963" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7fea3ae1-16b0-4b65-9f4e-655f22f0c142" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://deleteCustomerdbtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://deleteCustomerdbtest/mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="84576fb1-25e2-46d3-ae7d-cda8f627412c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://deleteCustomerdbtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://deleteCustomerdbtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://deleteCustomerdbtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to deleteCustomer-db" doc:id="4755c007-66c2-46eb-8fc9-09a078c19f2c" name="deleteCustomer-db"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="1e914e23-b790-4ab5-aeb3-f650de18711c" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deleteCustomerdbtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

</mule>
